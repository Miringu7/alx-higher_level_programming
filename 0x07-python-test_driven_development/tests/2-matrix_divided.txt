#Test cases for matrix division

Import module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test matrix with mixed data type
    >>> matrix_divided([[2, 4, 8], [1, "foo", 3]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists)of integers/floats

Test matrix with different rows size
    >>> matrix_divided([[2, 4, 8], [1, 3]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test with normal matrix
     >>> matrix_divided([[1, 4, 4], [1, 2, 3]], 10)
     [[0.1, 0.4, 0.4], [0.1, 0.2, 0.3]]

Test with string argument
     >>> matrix_divided("doe", 1)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists)of integers/floats


Test division by zero:
    >>> matrix_divided([[9, 1, 3], [1, 1, 2]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Test 1st arg empty list:
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists)of integers/floats

Test empty matrix
     >>> matrix_divided([[]], 4)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists)of integers/floats

Test division with a string as div
     >>> matrix_divided([[3]], "doe")
     Traceback (most recent call last):
     ...
     TypeError: div must be a number
